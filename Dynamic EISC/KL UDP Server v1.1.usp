// KL UDP Server
// v1.0 - Initial version
// v1.1 - Changed RX/TX handling due to buffer overflows
//
// Dealer:
// System:
// Programmer: Kiel Lofstrand
// Comments:

// --- Compiler Directives ----------------------------------------------------

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
// #ENABLE_TRACE

#DEFINE_CONSTANT MAX_BUF_LEN  32768
#DEFINE_CONSTANT MAX_SOCK_LEN 1024

// --- Libraries --------------------------------------------------------------

// #USER_SIMPLSHARP_LIBRARY "<SIMPL# Library Name>"

// --- Inputs -----------------------------------------------------------------

DIGITAL_INPUT  Enable;
ANALOG_INPUT   Port;
STRING_INPUT   Address[16];
BUFFER_INPUT   To_Peer[MAX_BUF_LEN];

// --- Outputs ----------------------------------------------------------------

DIGITAL_OUTPUT Enable_Fb;
ANALOG_OUTPUT  Status;
STRING_OUTPUT  From_Peer;

// --- Parameters -------------------------------------------------------------

// --- Sockets ----------------------------------------------------------------

UDP_SOCKET Peer[MAX_SOCK_LEN];

// --- Structures -------------------------------------------------------------

// --- Global Variables -------------------------------------------------------

INTEGER bConnected;

// --- Functions --------------------------------------------------------------

FUNCTION Connect ()
{
	SIGNED_INTEGER res;
	
	If (bConnected = 0)
	{
		If ((Address <> "") && (Port > 1024))
			res = SocketUDP_Enable(Peer, Address, Port);
		Else
			res = -5;
			
		If (res = 0)
			bConnected = 1;
			
		Enable_Fb = bConnected;
		Status = res;
	}
}

FUNCTION Disconnect ()
{
	SIGNED_INTEGER res;
	
	If (bConnected = 1)
	{
		Status = SocketUDP_Disable(Peer);
		bConnected = 0;
		Enable_Fb = bConnected;
	}
}

// --- Events -----------------------------------------------------------------

PUSH Enable
{
	Connect();
}

RELEASE Enable
{
	Disconnect();
}

CHANGE Address
CHANGE Port
{
	Disconnect();
	
	If (Enable)
		Connect();
}

THREADSAFE CHANGE To_Peer
{
	STRING packet[MAX_SOCK_LEN];
	
	While (Len(To_Peer) > 0)
	{
		If (Len(To_Peer) < MAX_SOCK_LEN)
		{
			packet = To_Peer;
			ClearBuffer(To_Peer);
		}
		Else
			packet = RemoveByLength(MAX_SOCK_LEN, To_Peer);
			
		If (Len(packet) > 0)
			SocketSend(Peer, packet);
			
		ProcessLogic();
	}
}

THREADSAFE SOCKETRECEIVE Peer
{
	STRING msg[MAX_BUF_LEN];
	
	While (Len(Peer.SocketRxBuf) > 0)
	{
		msg = msg + Peer.SocketRxBuf;
		ClearBuffer(Peer.SocketRxBuf);
		ProcessLogic();
	}
	
	From_Peer = msg;
}

// --- Main -------------------------------------------------------------------

FUNCTION Main()
{
	WaitForInitializationComplete();
}
