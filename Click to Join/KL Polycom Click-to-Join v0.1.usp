/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT MAX_MEETINGS 5
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Update, Join_Meeting[MAX_MEETINGS,MAX_MEETINGS];
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT  From_Device[2000];

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT To_Device;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE CalendarMeetings
{
	INTEGER iEnabled;
	STRING  sID[255];
	STRING  sStartTime[50];
	STRING  sEndTime[50];
	STRING  sSubject[255];
	STRING  sDialSIP[255];
	STRING  sDialH323[255];
	STRING  sDialAudio[255];
	STRING  sPassword[255];
};

CalendarMeetings OneTouchMeeting[MAX_MEETINGS];

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER fUpdateBusy, fProcessCalendarList, fProcessMeetingDetail;
INTEGER fWaitForCalendarMeetingsDone, fWaitForMeetingInfoDone;
INTEGER iMeetingIndex, iMeetingCount;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function ResetMeetings()
{
	INTEGER i;
	
	For (i = 1 To MAX_MEETINGS)
	{
		OneTouchMeeting[i].iEnabled = 0;
		OneTouchMeeting[i].sDialSIP = "";
		OneTouchMeeting[i].sDialH323 = "";
		OneTouchMeeting[i].sDialAudio = "";
		OneTouchMeeting[i].sPassword = "";
	}
	
	iMeetingCount = 0;
}

Function DialMeeting(INTEGER index)
{
	If (index <= iMeetingCount)
	{
		If (OneTouchMeeting[index].iEnabled)
		{
			If (OneTouchMeeting[index].sDialSIP <> "")
			{
				MakeString(To_Device, "dial manual 6144 \x22%s\x22 sip\r", OneTouchMeeting[index].sDialSIP);
			}
			Else If (OneTouchMeeting[index].sDialH323 <> "")
			{
				MakeString(To_Device, "dial manual 6144 \x22%s\x22 h323\r", OneTouchMeeting[index].sDialH323);
			}
			Else If (OneTouchMeeting[index].sDialAudio <> "")
			{
				MakeString(To_Device, "dial phone auto \x22%s\x22\r", OneTouchMeeting[index].sDialAudio);
			}
			Else
			{
				Trace("DialMeeting: no method to dial meeting!");
			}
		}
	}	
}

Function ProcessCalendarMeeting(STRING text)
{
	STRING temp[512];
	
	// meeting|AAAaAEFsZXguTWFjRG9uYWxkQHBvbHljb20uY29tAVEACIjMne2/ndgARgAAAADr9GlhsSjWEZBcAAKzMphJBwA4wicbtr3UEZArAKAk09LtAAACZpKWAADe7hJleQIOS7j2mzRJxkLKAAADI/F8BAAA|2010-03-30:08:30|2010-03-30:09:00|Discuss Budget
	If (Left(text, 8) = "meeting|")
	{
		temp = Remove("|", text);												// meeting|
		temp = Remove("|", text);												// AAAaAEF...|
		OneTouchMeeting[iMeetingIndex].sID = Left(temp, Len(temp) - 1);
		temp = Remove("|", text);												// 2010-03-30:08:30|
		OneTouchMeeting[iMeetingIndex].sStartTime = Left(temp, Len(temp) - 1);
		temp = Remove("|", text);												// 2010-03-30:09:00|
		OneTouchMeeting[iMeetingIndex].sEndTime = Left(temp, Len(temp) - 1);
		OneTouchMeeting[iMeetingIndex].sSubject = Left(temp, Len(temp) - 2);	// Discuss Budget\n
		
		OneTouchMeeting[iMeetingIndex].iEnabled = 1;
		
		iMeetingIndex = iMeetingIndex + 1;
	}
}

Function ProcessMeetingDetail(STRING text)
{
	STRING temp[512];
	
	// calendarmeetings info start
	// id|AAAaAEFsZXguTWFjRG9uYWxkQHBvbHljb20uY29tAVEACIjMne2/ndgARgAAAADr9GlhsS
	//    jWEZBcAAKzMphJBwA4wicbtr3UEZArAKAk09LtAAACZpKWAADe7hJleQIOS7j2mzRJxkLKAAA
	//    DI/G8AAAQ
	// 2010-03-30:08:30|2010-03-30:09:00|dialable|public
	// organizer|Russell Bell
	// location|Russell's RMX Meeting Room - IP Video Number: 123456 (if
	//          registered to corp GK); 888-123-4567/978-123-4567 with passcode: #760900
	// subject|Bug Scrub
	// dialingnumber|video|733397@vsgwstdma01.r13.vsg.local2|sip
	// dialingnumber|video|733397|h323
	// dialingnumber|audio|48527
	// meetingpassword|none
	// attendee|Russell Bell
	// attendee|Rebecca Sharp
	// calendarmeetings info end
	
	If (Left(text, 20) = "dialingnumber|video|")
	{
		temp = Remove("video|", text);
		temp = Left(text, Len(text) - 2);
		
		If (Right(temp, 4) = "|sip")
		{
			OneTouchMeeting[iMeetingIndex].sDialSIP = Left(temp, Len(temp) - 4);
		}
		Else If (Right(temp, 5) = "|h323")
		{
			OneTouchMeeting[iMeetingIndex].sDialH323 = Left(temp, Len(temp) - 5);
		}
	}
	Else If (Left(text, 20) = "dialingnumber|audio|")
	{
		temp = Remove("audio|", text);
		temp = Left(text, Len(text) - 2);
		
		OneTouchMeeting[iMeetingIndex].sDialAudio = temp;
	}
	Else If (Left(text, 16) = "meetingpassword|")
	{
		temp = Remove("meetingpassword|", text);
		temp = Left(text, Len(text) - 2);
		
		If (temp = "none")
		{
			OneTouchMeeting[iMeetingIndex].sPassword = "";
		}
		Else
		{
			OneTouchMeeting[iMeetingIndex].sPassword = temp;
		}
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

THREADSAFE PUSH Update
{
	If (fUpdateBusy = 0)
	{
		fUpdateBusy = 1;
		fWaitForCalendarMeetingsDone = 1;
		To_Device = "calendarmeetings list today\r";
		
		While (fWaitForCalendarMeetingsDone)
		{
			Delay(10);
		}
		
		If (iMeetingCount > 0)
		{
			If (iMeetingCount > MAX_MEETINGS)
			{
				iMeetingCount = MAX_MEETINGS;
			}
			
			For (iMeetingIndex = 1 To iMeetingCount)
			{
				fWaitForMeetingInfoDone = 1;
				MakeString(To_Device, "calendarmeetings info %s\n", OneTouchMeeting[iMeetingIndex].sID);
				
				While (fWaitForMeetingInfoDone)
				{
					Delay(10);
				}
			}
		}
		
		fUpdateBusy = 0;
	}
}

PUSH Join_Meeting
{
	DialMeeting(GetLastModifiedArrayIndex());
}

THREADSAFE CHANGE From_Device
{
	STRING text[512];
	STRING temp[512];
	
	While (1)
	{
		text = Gather("\n", From_Device);

		If (text = "calendarmeetings list begin\n")
		{
			ResetMeetings();
			fProcessCalendarList = 1;
			iMeetingIndex = 1;
		}
		Else If (text = "calendarmeetings list end\n")
		{
			iMeetingCount = iMeetingIndex - 1;
			fProcessCalendarList = 0;
			fWaitForCalendarMeetingsDone = 0;
		}
		Else If (text = "calendarmeetings info start\n")
		{
			fProcessMeetingDetail = 1;
		}
		Else If (text = "calendarmeetings info end\n")
		{
			fProcessMeetingDetail = 0;
			fWaitForMeetingInfoDone = 0;
		}
		Else If (fProcessCalendarList = 1)
		{
			If (iMeetingIndex <= MAX_MEETINGS)
			{
				ProcessCalendarMeeting(text);
			}
		}
		Else If (fProcessMeetingDetail = 1)
		{
			If (iMeetingIndex <= MAX_MEETINGS)
			{
				ProcessMeetingDetail(text);
			}
		}
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	fUpdateBusy = 0;
	fProcessCalendarList = 0;
	fProcessMeetingDetail = 0;
	
    // WaitForInitializationComplete();
}

